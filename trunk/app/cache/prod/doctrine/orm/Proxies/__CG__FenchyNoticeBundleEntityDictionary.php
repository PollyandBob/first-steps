<?php

namespace Proxies\__CG__\Fenchy\NoticeBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Dictionary extends \Fenchy\NoticeBundle\Entity\Dictionary implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getText()
    {
        $this->__load();
        return parent::getText();
    }

    public function setText($text)
    {
        $this->__load();
        return parent::setText($text);
    }

    public function setSearchActivated($activated)
    {
        $this->__load();
        return parent::setSearchActivated($activated);
    }

    public function getSearchActivated()
    {
        $this->__load();
        return parent::getSearchActivated();
    }

    public function setTagActivated($activated)
    {
        $this->__load();
        return parent::setTagActivated($activated);
    }

    public function getTagActivated()
    {
        $this->__load();
        return parent::getTagActivated();
    }

    public function setDisabled($disabled)
    {
        $this->__load();
        return parent::setDisabled($disabled);
    }

    public function getDisabled()
    {
        $this->__load();
        return parent::getDisabled();
    }

    public function setQuantitySearch($quantity)
    {
        $this->__load();
        return parent::setQuantitySearch($quantity);
    }

    public function getQuantitySearch()
    {
        $this->__load();
        return parent::getQuantitySearch();
    }

    public function incQuantitySearch($amount = 1)
    {
        $this->__load();
        return parent::incQuantitySearch($amount);
    }

    public function setQuantityTag($quantity)
    {
        $this->__load();
        return parent::setQuantityTag($quantity);
    }

    public function getQuantityTag()
    {
        $this->__load();
        return parent::getQuantityTag();
    }

    public function incQuantityTag($amount = 1)
    {
        $this->__load();
        return parent::incQuantityTag($amount);
    }

    public function setTag($bool)
    {
        $this->__load();
        return parent::setTag($bool);
    }

    public function getTag()
    {
        $this->__load();
        return parent::getTag();
    }

    public function getNotices()
    {
        $this->__load();
        return parent::getNotices();
    }

    public function setNotices($notices)
    {
        $this->__load();
        return parent::setNotices($notices);
    }

    public function addNotice($notice)
    {
        $this->__load();
        return parent::addNotice($notice);
    }

    public function removeNotice($notice)
    {
        $this->__load();
        return parent::removeNotice($notice);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'text', 'tag', 'quantitySearch', 'quantityTag', 'searchActivated', 'tagActivated', 'disabled', 'notices');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}