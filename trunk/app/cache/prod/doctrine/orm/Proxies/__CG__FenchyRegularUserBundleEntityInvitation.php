<?php

namespace Proxies\__CG__\Fenchy\RegularUserBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Invitation extends \Fenchy\RegularUserBundle\Entity\Invitation implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setCreatedAt($createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setUpdatedAt($updatedAt)
    {
        $this->__load();
        return parent::setUpdatedAt($updatedAt);
    }

    public function getUpdatedAt()
    {
        $this->__load();
        return parent::getUpdatedAt();
    }

    public function setAccepted($accepted)
    {
        $this->__load();
        return parent::setAccepted($accepted);
    }

    public function isAccepted()
    {
        $this->__load();
        return parent::isAccepted();
    }

    public function isRespond()
    {
        $this->__load();
        return parent::isRespond();
    }

    public function setInvitationBy(\Fenchy\RegularUserBundle\Entity\UserRegular $invitationBy = NULL)
    {
        $this->__load();
        return parent::setInvitationBy($invitationBy);
    }

    public function getInvitationBy()
    {
        $this->__load();
        return parent::getInvitationBy();
    }

    public function setInvitationFor(\Fenchy\RegularUserBundle\Entity\UserRegular $invitationFor = NULL)
    {
        $this->__load();
        return parent::setInvitationFor($invitationFor);
    }

    public function getInvitationFor()
    {
        $this->__load();
        return parent::getInvitationFor();
    }

    public function getAccepted()
    {
        $this->__load();
        return parent::getAccepted();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'created_at', 'updated_at', 'accepted', 'invitation_by', 'invitation_for');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}