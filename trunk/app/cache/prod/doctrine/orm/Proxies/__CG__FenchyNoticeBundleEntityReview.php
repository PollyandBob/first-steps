<?php

namespace Proxies\__CG__\Fenchy\NoticeBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Review extends \Fenchy\NoticeBundle\Entity\Review implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getText()
    {
        $this->__load();
        return parent::getText();
    }

    public function setText($text)
    {
        $this->__load();
        return parent::setText($text);
    }

    public function setType($type)
    {
        $this->__load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->__load();
        return parent::getType();
    }

    public function getTypeName($type = NULL)
    {
        $this->__load();
        return parent::getTypeName($type);
    }

    public function setAuthor(\Fenchy\UserBundle\Entity\User $user)
    {
        $this->__load();
        return parent::setAuthor($user);
    }

    public function getAuthor()
    {
        $this->__load();
        return parent::getAuthor();
    }

    public function setCreatedAt($datetime = NULL)
    {
        $this->__load();
        return parent::setCreatedAt($datetime);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function getAboutNotice()
    {
        $this->__load();
        return parent::getAboutNotice();
    }

    public function setAboutNotice(\Fenchy\NoticeBundle\Entity\Notice $notice)
    {
        $this->__load();
        return parent::setAboutNotice($notice);
    }

    public function unsetAboutNotice()
    {
        $this->__load();
        return parent::unsetAboutNotice();
    }

    public function getAboutUser()
    {
        $this->__load();
        return parent::getAboutUser();
    }

    public function setAboutUser(\Fenchy\UserBundle\Entity\User $user)
    {
        $this->__load();
        return parent::setAboutUser($user);
    }

    public function getAbout()
    {
        $this->__load();
        return parent::getAbout();
    }

    public function findTargetUser()
    {
        $this->__load();
        return parent::findTargetUser();
    }

    public function setStickers(\Doctrine\Common\Collections\ArrayCollection $stickers)
    {
        $this->__load();
        return parent::setStickers($stickers);
    }

    public function addSticker(\Fenchy\UtilBundle\Entity\Sticker $sticker)
    {
        $this->__load();
        return parent::addSticker($sticker);
    }

    public function removeSticker(\Fenchy\UtilBundle\Entity\Sticker $sticker)
    {
        $this->__load();
        return parent::removeSticker($sticker);
    }

    public function getStickers()
    {
        $this->__load();
        return parent::getStickers();
    }

    public function getIsRead()
    {
        $this->__load();
        return parent::getIsRead();
    }

    public function setIsRead($is_read)
    {
        $this->__load();
        return parent::setIsRead($is_read);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'title', 'text', 'type', 'created_at', 'is_read', 'author', 'aboutNotice', 'aboutUser', 'stickers');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}