<?php

namespace Proxies\__CG__\Fenchy\UserBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Reference extends \Fenchy\UserBundle\Entity\Reference implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setRefUser(\Fenchy\UserBundle\Entity\User $user)
    {
        $this->__load();
        return parent::setRefUser($user);
    }

    public function getRefUser()
    {
        $this->__load();
        return parent::getRefUser();
    }

    public function setNewUser(\Fenchy\UserBundle\Entity\User $newUser)
    {
        $this->__load();
        return parent::setNewUser($newUser);
    }

    public function getNewUser()
    {
        $this->__load();
        return parent::getNewUser();
    }

    public function setActive($active)
    {
        $this->__load();
        return parent::setActive($active);
    }

    public function getActive()
    {
        $this->__load();
        return parent::getActive();
    }

    public function setNewUserEmail($newUserEmail)
    {
        $this->__load();
        return parent::setNewUserEmail($newUserEmail);
    }

    public function getNewUserEmail()
    {
        $this->__load();
        return parent::getNewUserEmail();
    }

    public function setNewUserFbId($newUserFbId)
    {
        $this->__load();
        return parent::setNewUserFbId($newUserFbId);
    }

    public function getNewUserFbId()
    {
        $this->__load();
        return parent::getNewUserFbId();
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }

    public function setCreatedAt($date)
    {
        $this->__load();
        return parent::setCreatedAt($date);
    }

    public function getJoinedAt()
    {
        $this->__load();
        return parent::getJoinedAt();
    }

    public function setJoinedAt($date)
    {
        $this->__load();
        return parent::setJoinedAt($date);
    }

    public function getActivatedAt()
    {
        $this->__load();
        return parent::getActivatedAt();
    }

    public function setActivatedAt($date)
    {
        $this->__load();
        return parent::setActivatedAt($date);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'new_user_fb_id', 'new_user_email', 'active', 'created_at', 'activated_at', 'joined_at', 'ref_user', 'new_user');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}